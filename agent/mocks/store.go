// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock_agent is a generated GoMock package.
package mock_agent

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIStore is a mock of IStore interface
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
}

// MockIStoreMockRecorder is the mock recorder for MockIStore
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockIStore) Set(k string, v interface{}) error {
	ret := m.ctrl.Call(m, "Set", k, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockIStoreMockRecorder) Set(k, v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIStore)(nil).Set), k, v)
}

// Get mocks base method
func (m *MockIStore) Get(k string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIStoreMockRecorder) Get(k interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIStore)(nil).Get), k)
}
